apiVersion: v1
data:
  kubeconfig: apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lJTmJIV3pZZHA1dzh3RFFZSktvWklodmNOQVFFTEJRQXdOekVTTUJBR0ExVUUKQ3hNSmIzQmxibk5vYVdaME1TRXdId1lEVlFRREV4aHJkV0psTFdGd2FYTmxjblpsY2kxc1lpMXphV2R1WlhJdwpIaGNOTWpJd05UTXdNVEF4T1RVeFdoY05Nekl3TlRJM01UQXhPVFV4V2pBM01SSXdFQVlEVlFRTEV3bHZjR1Z1CmMyaHBablF4SVRBZkJnTlZCQU1UR0d0MVltVXRZWEJwYzJWeWRtVnlMV3hpTFhOcFoyNWxjakNDQVNJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTW0xZVFQTXFLSVl1SGtBMjJIUHdHQ25iMmswNWZaMwpmS0RncHdjNFU2TFUxcXF3b1RsTExRM1dOZEpicmNjWEhpcmxrQ2NoSXZjU3hhRi9hekZnREduclk4bUM5MmphClVRNzVBbVR3ZG4zNVlxYUdaYjluTUV5Q2I3akhwTjd5c0ZKejJOdlBxYXRiVUloN0RaNUFPbXhsUjZtTFYvS0UKRFlyMHo2UUFiQ0JOTFlpbUg0VEdNbUNmci9ZODFqK2hhRjE1L3RUQzdpN1RwUjlkVURMRmVESkhYQkh5MjJXRwp3ZXMzNnZFaTZLUlFvOEdPbTRLSmZPSGZUM3Z6aGR3M3VNVVdwb3pxL3dHS0xyNmhpdk4vUWRlWEtEOTFySURRCjhKamhkbDMvbkRSSnpQb3lqMXJ1QkV4UWFmci92YkVpaHdKSVE4NDZPYllqbXd6alpMdWNkUzhDQXdFQUFhTkMKTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkVEZQo1dDFaQndXWUtpQklLOFBSOUZGM2l3aE5NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ4OWdKVCtWaDNvNWJDClN5Mlk0RHBYMEs5SXM5TzloTDY5MERKTkJ1dFFlanFEZG1Ld0R4YkgxMkpKMDdSWWtuS1NDdGVqcU9jQVJXWksKd2YzZFlKcVdUOTRIRjUrVVhRRTZjdkVFczVNYkcwUjUrV3htODczdDlJbU9jWk9kOTJScjZVWDJLVGc0WmhlUgpramROWTdvVHRQZTBjV0ZIWkFnSXpWRTZZdEZsREwzbVVVREwxc044VitPUG11YktPNnlzWlVVNUJUbkE1eS9ZCnVVdTVwN0syUG9HTXpTeWt6M0xUUkNtMHJ1SmpZVlNsazZzWWNrSFExeFZHSW40RGk5NEZhUzQwVUdDbCthR0kKNlF3MWtSUlI2SkJVK0JjeFNUS3pYRlpXY2xBK3ltQTZJNWlacDlxZVZyMmdaRGZVMVZyM1hyVllmQlVaQ2htWAp6TU5GYXZUWgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEUURDQ0FpaWdBd0lCQWdJSWRMaHdqcEM2dFhFd0RRWUpLb1pJaHZjTkFRRUxCUUF3UGpFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNU2d3SmdZRFZRUURFeDlyZFdKbExXRndhWE5sY25abGNpMXNiMk5oYkdodmMzUXQKYzJsbmJtVnlNQjRYRFRJeU1EVXpNREV3TVRrMU1Wb1hEVE15TURVeU56RXdNVGsxTVZvd1BqRVNNQkFHQTFVRQpDeE1KYjNCbGJuTm9hV1owTVNnd0pnWURWUVFERXg5cmRXSmxMV0Z3YVhObGNuWmxjaTFzYjJOaGJHaHZjM1F0CmMybG5ibVZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3cDlHUlk4QlN2V2oKd3lzSXdIWGg4by9NUHoza0xqaTJDUytXU3haeWpacUlpaWV0VitNWUlXcSsyV0JpV01VeTg3ZHBvOSs5M3FITQpFYjhHWU1CTlRORk1NM1J0Wm9GSU44VWlrSk1PMXhoWEt5OWU4L2FlWWxocjR6Ykh1MXlHR3NTbWxUMGkrMjRTClVtN3hPQ0xpTUdyOXpETDc4eWYyYktYeWwycWtXaGFMQVpxazl5ZlZvUVVnb3FkUzdGaHErclJZZGJzSVBRS0kKdUlMKy9wT2VqYjdqTU9QR1kybmdIbk5nUURxdzg0NERPOVI2aURVRGFwLy9xZEhURTNkMkN4L3BmWHlQZ3psSwp3cWwzSEtmUkhHWEduL0Jzc0IvMnBhUTBQS0E5SEU3bTByakx2TmxFL2lBdWpqQy9JbWUvZStjaDRKeEV6Q1ppCnpZY3VNd2xWb3dJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVTBocUdCNEFtS1hEcEpkZlUvZkI4ZG0wU1U5VXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUN4ZHlPdGhQZGZ2MDB6dWtSTEpvdytOWUFhS0k4NFhrUlg4VHRtOEszd1VaWkdvYWZGblJQdmlsWUdFClk2Tk4vR0MrRXZMb0pzR3J6QXVVNU1LZk1taGszZWhENW5FUExzYVFCNDNqWjNiWml5RVBTeHZKY0dnN3B3aSsKUUpDNTQ4WEpHOE1HVHVpY1RyQksxMjMwRStQMGsxcnlRdTlQeEJQcTJOT0lyb2l3d0JzVlhiR3BNa3JValhKZQpldlVhd3hNbS9PVkZ3L0NjN1prUm1FZk1Td2FrMUVWVG96WDMxVnZBdDVyRkRZeWljc2FlWHFmNFkxQVE4TnJBCkFCTGtsNSs4TnduMGlIVk5RZURXMmc3amRBaEplbjBLNUw0elovNU01dUQzc3puSnE0T1V2ZXl4MGYzcmllUXYKdFVxcDFNd3dwMEowclh3T01zTWhvcTNtWXJjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEVERDQ0FqU2dBd0lCQWdJSVhJZFhJMzBFUWpFd0RRWUpLb1pJaHZjTkFRRUxCUUF3UkRFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyYVdObExXNWwKZEhkdmNtc3RjMmxuYm1WeU1CNFhEVEl5TURVek1ERXdNVGsxTVZvWERUTXlNRFV5TnpFd01UazFNVm93UkRFUwpNQkFHQTFVRUN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyCmFXTmxMVzVsZEhkdmNtc3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQXI3TU1SazlqWVljTFhmQnFFakdUUXBEMkwwSFFQS1BCYktaSURMRmUva1VLMHd6d01qWXB6aVJZWGN4cQpCbGMxZWErWENjdGY1ZXc3S21hVWQ1QkorYUFQY3o1MURmdVdrUXNhbjRSYVRLWENhT1RPcXlxY2RlUlVWSEZVCmh6UGtpREF1SSthc0hQa3Znd0lsMHM2bzVjSGNlYjVPbnN4TFQvMkloNTBtUjFWSUJGb3I4aDJuOG9ILzFIRkwKbTNUK3N2NXl3WmJ5OW9Rc3pRQUdrQjg2bFBYS0ZibG9sSzZCNEVheGZIdjNCQnRaSGpTSFEvZnl3bnd5MktoSgprUUtGMmVuRE9oa0NOL1E3Zk02WTBYVUlHV3lITVozakk1ZVNqTDdjKzVTalA3d0h2bVlkbmFJK2l5MjRsclFmCnVmdG5rdy9yUCtJR1JaVFVHY0ZrRXB1VUZRSURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVwamZteFZyQ0hOZXo0SWFMOXcrcG8weWxjZVl3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDT3BiTmxEeXEwMURRYnV0ejEwUTJVMjlOR1NQU1RkQk8zL2lNelNpNzF3Ck9LZnF4NzJ5RzQrRWlCYVdJaGQ2UitOQlZDejdQZVcxTFp2RElVOHAyVS9mUGNUTlEwM29DSHpiWTV3dng4UWUKN25FRS9lbmhIajJ3YVVFcUpQT0VSQ0c3VGVaSXU1cldobEk1UmFFV0tXQ2pmZUdGZVgvV2tPc1Q1b3Eya0c0SQozayt5ZmJ1U1RWWE5DbnRuZU1tY2djSzFoR0didUIvVkZUbVJwdFZ4YjdCdE5TU2pxQXBKY3pSSnl2VlROamlnCjRrQjlTc1QwVkQzMldIc1owTVdjWGFLRmxHZGlWcE5EVGhCRjNUTndMWlJueHFRY2lzUDBpVWc5TUNvZWp4T0cKdnFyd2hoN0tMcmFuSmNlNW1qUkwzQnhsRXU0T1BvbWF6UUZBM3kzTnFKaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRGx6Q0NBbitnQXdJQkFnSUlmbEFCSmt6V2syb3dEUVlKS29aSWh2Y05BUUVMQlFBd1dURlhNRlVHQTFVRQpBd3hPYjNCbGJuTm9hV1owTFd0MVltVXRZWEJwYzJWeWRtVnlMVzl3WlhKaGRHOXlYMnh2WTJGc2FHOXpkQzF5ClpXTnZkbVZ5ZVMxelpYSjJhVzVuTFhOcFoyNWxja0F4TmpVek9UQTJOekF5TUI0WERUSXlNRFV6TURFd016RTAKTVZvWERUTXlNRFV5TnpFd016RTBNbG93V1RGWE1GVUdBMVVFQXd4T2IzQmxibk5vYVdaMExXdDFZbVV0WVhCcApjMlZ5ZG1WeUxXOXdaWEpoZEc5eVgyeHZZMkZzYUc5emRDMXlaV052ZG1WeWVTMXpaWEoyYVc1bkxYTnBaMjVsCmNrQXhOalV6T1RBMk56QXlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDZ04KVTR5ZUxtVnlyRldRN2JJcTZjQ1U0UjRqYkhIK2tjZlhVZkdNVm9aQWpHZUxHQUp3amo0aEFkSEhZNUJEZUlHNgo5OTRsN1Q2UTBKTk0wYjhCMktXWXg2cDR4Qk9COW1jNGgrTWtHVGlSMENhdFduZGFVOUpCOVVYcFJHRVIyTmZyCjBiNk94UXdONVFUTXQ2SW8zZ3JYMHFRVC9NOEhxb0lGSTlhR24rRUVxK1JtK0RXVUZsMUhZTGEzRTFJNEZRa1IKcVBUNTFvSm43ZUhMU3JQb2ZvWlliZTdQQmZOMEFpK20xRnRKbGpUOE8wekhHRm1rMFpCNDRrbGw2dGlyckhyeQpZREI4TnhNTjBsTC9BVkF3WDhBMHQyUVAxdVJIdkxvNDl6QUx3L2VpQkI1dnpyWGJSNjhPck9lSWQ0RUFhRGtUCk9yQkVVaW5NWWNUUVo2SXZvUUlEQVFBQm8yTXdZVEFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVU2huUFpMK2RXbzJUVHFaUXVLa1F1bSt2b093d0h3WURWUjBqQkJndwpGb0FVU2huUFpMK2RXbzJUVHFaUXVLa1F1bSt2b093d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIdnFPdjRhCkpmQVAralJuVmpWMW0veGY0OTlsMmlySFI0MWtlbVczWFhUblFFQ2NiN0xDb25qM2NnTWlvcm1aZnIrZkpNMTQKaWpTK3FoaGozZHppV2ZJWTBxVmx1a1lOMXUweHEwZFZQcytVSGdCak94aU1ZWmtIRkFsempBelcrc3Q0K1ltdgpaTE0xYm9IZVNxUERmbXB3aTd2SDZHT2lRcU9qYXRVQk1KS1hhb2tNYlB4Y3MyN2lvQ2RVQzlSZ3VyM0tXZThnCmIzY2hEZkppOWRmT09aOGtvYzJsOENja0tjdWJWUnc5alh2TXFGRUg1SkZqeHZNYTloRkNIbjlHNUJDQlhRNzgKdTVSdDZlZXhRbHlsY1pxQmdZcTAyTWVjYmpRWExGbGYwVW1ZSldZcUwvK2dSYzNDL3d6dkVWeXdzMWpWRGFjTwpabERJV2hOd3dzWmJrbVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURqekNDQW5lZ0F3SUJBZ0lJSERrSk81YkJSc2d3RFFZSktvWklodmNOQVFFTEJRQXdKakVrTUNJR0ExVUUKQXd3YmFXNW5jbVZ6Y3kxdmNHVnlZWFJ2Y2tBeE5qVXpPVEEyTnpjM01CNFhEVEl5TURVek1ERXdNekkxTjFvWApEVEkwTURVeU9URXdNekkxT0Zvd056RTFNRE1HQTFVRUF3d3NLaTVoY0hCekxtdDFZbVZpY21samF5MW9kV0l1CmMyRnVaR0p2ZURFM05UUXViM0JsYm5Sc1l5NWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURaaWxDY1Z1aFFFZVpJeHhEOUNRN2FKYTBlOEVrYzNKbnlMSnFKVFd3VkxsVktla2JIRytoTApQSkRTTnZSTWpKRC8rNy9BSmdubkNkWTBTVlV4Q1FBb0pZZ0grSUFmalY2RVNNMjAyeWZGeHZKN2p1b2NyRklxCmZNZGg2T3hNUGlpK0c3WnFlWUQvSHhPRUpJSzkyVEp4RGhPNjVxUHFwaENnZjNrY3ZqSDFHNUNpNG84cG81S0IKamhxdzRGRUY0Mm9KN1cwRlp2bXdrL08rWFpvNWluTE80alZMRFlKMVlrbktCYll6eFJNcHVYUnNPNEtoVmVucgpaNGJhNExJaHFhdnpzSjNyUWhQOUdsdGlDMDhGczJvbEJJN0JYclVWcEtwZmhmeThlTnUvVWtUMkJEaHBWV25LClk2dUNidmFkeVJENkRyQk53Q0JFSng3V1I0STd4aDhqQWdNQkFBR2pnYTh3Z2F3d0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRQpGTEhoREtsU2o1NGVYa1NoNWR6czNNLzhmZUJ1TUI4R0ExVWRJd1FZTUJhQUZQNlZ2VkkvMlZmWFpOKzViZ0h6ClRRSXU1WjFLTURjR0ExVWRFUVF3TUM2Q0xDb3VZWEJ3Y3k1cmRXSmxZbkpwWTJzdGFIVmlMbk5oYm1SaWIzZ3gKTnpVMExtOXdaVzUwYkdNdVkyOXRNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJPWkdwOXVwajBsanYrSGwzRAp3WlFrblo3aDhGNkFBN0Y3TGRTTzNaTEEvVnRVQlFWNWNHNloxdXdwWDJHbmZNMXpGa1h1ZVJmYmVPNkdmRllTCk5YRldHSlhaeGh1MkNMaDFXTHRmU3dVN3FrWDlqVU1mY01QYklQaVR1MEdYcnBDTXh5dzdUSW5DeXlWYjFJWGkKWjVKM0NjdjdpbzZmWHZ6N0xoZGY4ZDhvcXA2U1IrOTcvSTd6M3BtVGF3UkozdnFiNkpFT1g1eis3OGpSZXBzZwpBRW5mWW4xQVZGR2hMRlBTZHhZQWdpaTNDZjVCYWhNb3F3RDhDSHhqZ3pSRHRsVUw3NWRybHZ4U2RtSGRuNzBVCllia0ZpamhMaDFPNmtKQlRBalBFRHU2RE8vTjdlcTdDUWZXNUlXakxUWVZhVDhKejUzUllvK2l4cjljQUpHWW4KaHdvZgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlERERDQ0FmU2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUXNGQURBbU1TUXdJZ1lEVlFRRERCdHBibWR5ClpYTnpMVzl3WlhKaGRHOXlRREUyTlRNNU1EWTNOemN3SGhjTk1qSXdOVE13TVRBek1qVTJXaGNOTWpRd05USTUKTVRBek1qVTNXakFtTVNRd0lnWURWUVFEREJ0cGJtZHlaWE56TFc5d1pYSmhkRzl5UURFMk5UTTVNRFkzTnpjdwpnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEanR4NjFhTmVWZmZCaTBrbUdLZjVVCmJRMThwUVp1blNtczJNV0phTE1MRFdwOTVPaUd0MkdYZkpjWXNpS0tUTlhtMk56YmtybWRKQm8yeU5nd1JEQVIKSDNNV1NoTFRNNmNiS0IvRmVIWmZCRnZWZFlSZWlzOUFCOEdEUXN0c2NqMmdzRGJqUVZXQW8yQ3hCSTRSYVVPMQpsN1drcFd0eDg4YUF3VEx0UVZ2Zk5vTk9ZYjZ6UHJpbHZwUHFaRjlOMy9VZlZHemNkRHJxVlJkdGpLeHBrMU5PClR3eGFuMzhJODlZd29yWFB2bU1PRWNwZlVpSDJiSmIwZ0pldlB6OUg5ZTcrNkdHWFNVUjNQL0ZlQmhVbGwzVzIKNjVCaXJVTUo3RW5BMHY2TnN3ejNKRGh1L2wrR0lORWZzQzFJanpYZUI1SndLd0Z4dTdraG16ZHFKRllLd0lyWgpBZ01CQUFHalJUQkRNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQjBHCkExVWREZ1FXQkJUK2xiMVNQOWxYMTJUZnVXNEI4MDBDTHVXZFNqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKWGF5VWZ6TjZST2RuS01HekcydVRCSlRVWUdBNGFuMnYxbjVnbDlxb24yMUZxcjF5d1VZcFhmejZPazVyTVZUMQp5SHJaS3pVWFhPQmsvR3l1S0c2MlJmSmJNZFgyRjRBbnBxTW9CMlkvbXhwdFYzdnRaU3ZtZ0E0OEZPSHdoTnlCCmFVeGVGRW0yd0thbU9hNlRQN2VzR1lDdjBWc1lRWkxIbVU1L3VJU3g5NlV2NURyNk1YczR2T3JVMi9yRndLakgKN25sY3AvUGZ2c0pJMHhnMVBDelpDanJmS3NWVkZHZ2s5OGwrUFRlaGxnMTg0QUcvb2ZyMG5ISkRNa2liV0tJZApISjFqMFZSRXVNb3ZMaFhMOFR1S3FpS1JrSFp3K012cDhlUStNRGZxT0E2d1R2eVJOYXNYUWZhNW9hN3F4T2lJCm40TE95MXpWSUpUai9SdG9WcUJDd1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://api.kubebrick-hub.sandbox1754.opentlc.com:6443
  name: default-cluster
contexts:
- context:
    cluster: default-cluster
    namespace: default
    user: default-auth
  name: default-context
current-context: default-context
kind: Config
preferences: {}
users:
- name: default-auth
  user:
    token: eyJhbGciOiJSUzI1NiIsImtpZCI6Imp4MnJ6MGxRbzFWZmlvellPZ2wxbTU0UDZlejctdEFEb051MUpxY0VSczQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJtaWNyb3NoaWZ0LXBhY2thZ2luZyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJtaWNyb3NoaWZ0LXBhY2thZ2luZy1ib290c3RyYXAtc2EtdG9rZW4tems2NHoiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoibWljcm9zaGlmdC1wYWNrYWdpbmctYm9vdHN0cmFwLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMjkwZDdhOTQtMjBlMy00YmQ2LWEyZDEtYTFiODQyYzgwZTU5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Om1pY3Jvc2hpZnQtcGFja2FnaW5nOm1pY3Jvc2hpZnQtcGFja2FnaW5nLWJvb3RzdHJhcC1zYSJ9.HdbOhavK2B0IHJx15vmoOaM3T1RoqJ-pwV5nVekUwxr_saEsTqcwda3z7VvICEKLqo8YJ6y2FhFAXU6-sYkM-EkI7UeJVw4asurdwEmUVxK1nPVsxpHkeU3KFrC-OKLxTM3BXiUC_eQKxTa9Me2DuV0xoCqtN3csr0M-eNFjmWZw7pZHcb34WFgZG3fOYNEwTLP9DOjKBihnTJRLXgevt1Sph23BwEDR58LbTeoACrU2nxepFR_rn4Z0iRQRdjCo7eGduBrbcnDP2cDHL4VpMu9SOLbzfr6OPnmMsAQ24MkMdjQPiTFM11k1NZsBzR3CFVao1MRge_rq5TI9G8YPEXtMwmY_xjJ4K3lDXfU79EcfUIIgT15hNuqHt_jfVDkv-RnFKldfc2Hkos9gEZZNJPaNN3xf6-HlG3M1cWb0T8aJt8pG9V6evINP0Vij_1JKW6FAnFQntzUq-zR0jmO3dN6XrYhGRwJQLkEjhLqwXKobk-WpOrRUn9zBUp3y9fT6hmvnstd0iykV_gZBLidAZ9r9wdsWyK_MnmhRkkVWQF-_u0-LdYjUh517LAoyRbj62RySr---0j8OXRc3oBesFT6SgPBot042-jIHrVhjIX2J6NnkTCcCGt_xXs0fN_ZVphUTB8YCMR1HhAuRWBRnflxWNlq882D3L1aRrn75q8w

kind: Secret
metadata:
  name: bootstrap-hub-kubeconfig
  namespace: open-cluster-management-agent
type: Opaque

